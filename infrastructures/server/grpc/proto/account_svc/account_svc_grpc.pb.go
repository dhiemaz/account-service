// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: account_svc.proto

package account_svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmployeeService_AccountRegistration_FullMethodName     = "/account_svc.EmployeeService/AccountRegistration"
	EmployeeService_AccountUpdate_FullMethodName           = "/account_svc.EmployeeService/AccountUpdate"
	EmployeeService_AccountSearch_FullMethodName           = "/account_svc.EmployeeService/AccountSearch"
	EmployeeService_AccountSearchByUsername_FullMethodName = "/account_svc.EmployeeService/AccountSearchByUsername"
)

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	AccountRegistration(ctx context.Context, in *AccountRegistrationRequest, opts ...grpc.CallOption) (*AccountRegistrationResponse, error)
	AccountUpdate(ctx context.Context, in *AccountUpdateRequest, opts ...grpc.CallOption) (*AccountUpdateResponse, error)
	AccountSearch(ctx context.Context, in *AccountSearchRequest, opts ...grpc.CallOption) (*AccountSearchResponse, error)
	AccountSearchByUsername(ctx context.Context, in *AccountSearchByUsernameRequest, opts ...grpc.CallOption) (*AccountSearchByUsernameResponse, error)
}

type employeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeServiceClient(cc grpc.ClientConnInterface) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) AccountRegistration(ctx context.Context, in *AccountRegistrationRequest, opts ...grpc.CallOption) (*AccountRegistrationResponse, error) {
	out := new(AccountRegistrationResponse)
	err := c.cc.Invoke(ctx, EmployeeService_AccountRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) AccountUpdate(ctx context.Context, in *AccountUpdateRequest, opts ...grpc.CallOption) (*AccountUpdateResponse, error) {
	out := new(AccountUpdateResponse)
	err := c.cc.Invoke(ctx, EmployeeService_AccountUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) AccountSearch(ctx context.Context, in *AccountSearchRequest, opts ...grpc.CallOption) (*AccountSearchResponse, error) {
	out := new(AccountSearchResponse)
	err := c.cc.Invoke(ctx, EmployeeService_AccountSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) AccountSearchByUsername(ctx context.Context, in *AccountSearchByUsernameRequest, opts ...grpc.CallOption) (*AccountSearchByUsernameResponse, error) {
	out := new(AccountSearchByUsernameResponse)
	err := c.cc.Invoke(ctx, EmployeeService_AccountSearchByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
// All implementations should embed UnimplementedEmployeeServiceServer
// for forward compatibility
type EmployeeServiceServer interface {
	AccountRegistration(context.Context, *AccountRegistrationRequest) (*AccountRegistrationResponse, error)
	AccountUpdate(context.Context, *AccountUpdateRequest) (*AccountUpdateResponse, error)
	AccountSearch(context.Context, *AccountSearchRequest) (*AccountSearchResponse, error)
	AccountSearchByUsername(context.Context, *AccountSearchByUsernameRequest) (*AccountSearchByUsernameResponse, error)
}

// UnimplementedEmployeeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEmployeeServiceServer struct {
}

func (UnimplementedEmployeeServiceServer) AccountRegistration(context.Context, *AccountRegistrationRequest) (*AccountRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRegistration not implemented")
}
func (UnimplementedEmployeeServiceServer) AccountUpdate(context.Context, *AccountUpdateRequest) (*AccountUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdate not implemented")
}
func (UnimplementedEmployeeServiceServer) AccountSearch(context.Context, *AccountSearchRequest) (*AccountSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSearch not implemented")
}
func (UnimplementedEmployeeServiceServer) AccountSearchByUsername(context.Context, *AccountSearchByUsernameRequest) (*AccountSearchByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSearchByUsername not implemented")
}

// UnsafeEmployeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeServiceServer will
// result in compilation errors.
type UnsafeEmployeeServiceServer interface {
	mustEmbedUnimplementedEmployeeServiceServer()
}

func RegisterEmployeeServiceServer(s grpc.ServiceRegistrar, srv EmployeeServiceServer) {
	s.RegisterService(&EmployeeService_ServiceDesc, srv)
}

func _EmployeeService_AccountRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).AccountRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_AccountRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).AccountRegistration(ctx, req.(*AccountRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_AccountUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).AccountUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_AccountUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).AccountUpdate(ctx, req.(*AccountUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_AccountSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).AccountSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_AccountSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).AccountSearch(ctx, req.(*AccountSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_AccountSearchByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSearchByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).AccountSearchByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_AccountSearchByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).AccountSearchByUsername(ctx, req.(*AccountSearchByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeService_ServiceDesc is the grpc.ServiceDesc for EmployeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account_svc.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountRegistration",
			Handler:    _EmployeeService_AccountRegistration_Handler,
		},
		{
			MethodName: "AccountUpdate",
			Handler:    _EmployeeService_AccountUpdate_Handler,
		},
		{
			MethodName: "AccountSearch",
			Handler:    _EmployeeService_AccountSearch_Handler,
		},
		{
			MethodName: "AccountSearchByUsername",
			Handler:    _EmployeeService_AccountSearchByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_svc.proto",
}
